// Code generated by protoc-gen-go.
// source: employee.proto
// DO NOT EDIT!

package northwind

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "artisan"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Employee struct {
	Id              string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Login           string       `protobuf:"bytes,2,opt,name=login" json:"login,omitempty"`
	Salt            uint32       `protobuf:"varint,3,opt,name=salt" json:"salt,omitempty"`
	Password        string       `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	LastName        string       `protobuf:"bytes,5,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	FirstName       string       `protobuf:"bytes,6,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	Title           string       `protobuf:"bytes,7,opt,name=title" json:"title,omitempty"`
	TitleOfCourtesy string       `protobuf:"bytes,8,opt,name=title_of_courtesy,json=titleOfCourtesy" json:"title_of_courtesy,omitempty"`
	BirthDate       string       `protobuf:"bytes,9,opt,name=birth_date,json=birthDate" json:"birth_date,omitempty"`
	HireDate        string       `protobuf:"bytes,10,opt,name=hire_date,json=hireDate" json:"hire_date,omitempty"`
	Address         string       `protobuf:"bytes,11,opt,name=address" json:"address,omitempty"`
	City            string       `protobuf:"bytes,12,opt,name=city" json:"city,omitempty"`
	Region          *RegionFK    `protobuf:"bytes,13,opt,name=region" json:"region,omitempty"`
	PostalCode      string       `protobuf:"bytes,14,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	Country         string       `protobuf:"bytes,15,opt,name=country" json:"country,omitempty"`
	Phone           string       `protobuf:"bytes,16,opt,name=phone" json:"phone,omitempty"`
	Extension       string       `protobuf:"bytes,17,opt,name=extension" json:"extension,omitempty"`
	Photo           *ImageFK     `protobuf:"bytes,18,opt,name=photo" json:"photo,omitempty"`
	Notes           string       `protobuf:"bytes,19,opt,name=notes" json:"notes,omitempty"`
	ReportsTo       *EmployeeFK  `protobuf:"bytes,20,opt,name=reports_to,json=reportsTo" json:"reports_to,omitempty"`
	Territories     []*Territory `protobuf:"bytes,21,rep,name=territories" json:"territories,omitempty"`
}

func (m *Employee) Reset()                    { *m = Employee{} }
func (m *Employee) String() string            { return proto.CompactTextString(m) }
func (*Employee) ProtoMessage()               {}
func (*Employee) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Employee) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Employee) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *Employee) GetSalt() uint32 {
	if m != nil {
		return m.Salt
	}
	return 0
}

func (m *Employee) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Employee) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Employee) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Employee) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Employee) GetTitleOfCourtesy() string {
	if m != nil {
		return m.TitleOfCourtesy
	}
	return ""
}

func (m *Employee) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *Employee) GetHireDate() string {
	if m != nil {
		return m.HireDate
	}
	return ""
}

func (m *Employee) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Employee) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Employee) GetRegion() *RegionFK {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *Employee) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Employee) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Employee) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Employee) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *Employee) GetPhoto() *ImageFK {
	if m != nil {
		return m.Photo
	}
	return nil
}

func (m *Employee) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Employee) GetReportsTo() *EmployeeFK {
	if m != nil {
		return m.ReportsTo
	}
	return nil
}

func (m *Employee) GetTerritories() []*Territory {
	if m != nil {
		return m.Territories
	}
	return nil
}

type EmployeeFK struct {
	// Types that are valid to be assigned to Employee:
	//	*EmployeeFK_Id
	//	*EmployeeFK_Instance
	Employee isEmployeeFK_Employee `protobuf_oneof:"employee"`
}

func (m *EmployeeFK) Reset()                    { *m = EmployeeFK{} }
func (m *EmployeeFK) String() string            { return proto.CompactTextString(m) }
func (*EmployeeFK) ProtoMessage()               {}
func (*EmployeeFK) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isEmployeeFK_Employee interface {
	isEmployeeFK_Employee()
}

type EmployeeFK_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,oneof"`
}
type EmployeeFK_Instance struct {
	Instance *Employee `protobuf:"bytes,2,opt,name=instance,oneof"`
}

func (*EmployeeFK_Id) isEmployeeFK_Employee()       {}
func (*EmployeeFK_Instance) isEmployeeFK_Employee() {}

func (m *EmployeeFK) GetEmployee() isEmployeeFK_Employee {
	if m != nil {
		return m.Employee
	}
	return nil
}

func (m *EmployeeFK) GetId() string {
	if x, ok := m.GetEmployee().(*EmployeeFK_Id); ok {
		return x.Id
	}
	return ""
}

func (m *EmployeeFK) GetInstance() *Employee {
	if x, ok := m.GetEmployee().(*EmployeeFK_Instance); ok {
		return x.Instance
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*EmployeeFK) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _EmployeeFK_OneofMarshaler, _EmployeeFK_OneofUnmarshaler, _EmployeeFK_OneofSizer, []interface{}{
		(*EmployeeFK_Id)(nil),
		(*EmployeeFK_Instance)(nil),
	}
}

func _EmployeeFK_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*EmployeeFK)
	// employee
	switch x := m.Employee.(type) {
	case *EmployeeFK_Id:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Id)
	case *EmployeeFK_Instance:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instance); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("EmployeeFK.Employee has unexpected type %T", x)
	}
	return nil
}

func _EmployeeFK_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*EmployeeFK)
	switch tag {
	case 1: // employee.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Employee = &EmployeeFK_Id{x}
		return true, err
	case 2: // employee.instance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Employee)
		err := b.DecodeMessage(msg)
		m.Employee = &EmployeeFK_Instance{msg}
		return true, err
	default:
		return false, nil
	}
}

func _EmployeeFK_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*EmployeeFK)
	// employee
	switch x := m.Employee.(type) {
	case *EmployeeFK_Id:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Id)))
		n += len(x.Id)
	case *EmployeeFK_Instance:
		s := proto.Size(x.Instance)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Employee)(nil), "northwind.Employee")
	proto.RegisterType((*EmployeeFK)(nil), "northwind.EmployeeFK")
}

func init() { proto.RegisterFile("employee.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x53, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0xae, 0xdb, 0xa4, 0xb5, 0x9f, 0xfb, 0x3b, 0x4d, 0xa4, 0xa7, 0x00, 0x22, 0x2d, 0x9b, 0x08,
	0xa4, 0x20, 0x0a, 0xe2, 0x00, 0x29, 0x44, 0x45, 0x91, 0x40, 0xb2, 0xba, 0x45, 0xd6, 0x34, 0x9e,
	0x24, 0x23, 0x39, 0x1e, 0x6b, 0xe6, 0x55, 0x25, 0x3b, 0xce, 0xc0, 0x8a, 0x25, 0x4b, 0x2e, 0xc0,
	0x92, 0x3b, 0x70, 0x04, 0xee, 0x00, 0x07, 0x40, 0x7e, 0x63, 0xa7, 0x61, 0xe5, 0x79, 0xdf, 0xf7,
	0xbd, 0x1f, 0xcf, 0xfb, 0x06, 0x0e, 0xd5, 0xb2, 0xcc, 0xcd, 0x4a, 0xa9, 0x61, 0x69, 0x0d, 0x19,
	0x11, 0x15, 0xc6, 0xd2, 0xe2, 0x4e, 0x17, 0x59, 0xaf, 0x2b, 0x2d, 0x69, 0x27, 0x8b, 0xe7, 0xf5,
	0xd7, 0x2b, 0x7a, 0xb1, 0x5e, 0xca, 0x79, 0x2d, 0xef, 0xed, 0x5b, 0x35, 0xd7, 0xa6, 0xa1, 0x8e,
	0x48, 0x59, 0xab, 0xc9, 0xd8, 0x95, 0x07, 0xce, 0x7f, 0xb6, 0x21, 0x7c, 0x5b, 0x37, 0x10, 0x1d,
	0xd8, 0xd6, 0x19, 0x06, 0xfd, 0x60, 0x10, 0x8d, 0x5a, 0x9f, 0x7f, 0x60, 0x90, 0x6c, 0xeb, 0x4c,
	0xf4, 0xa0, 0x9d, 0x9b, 0xb9, 0x2e, 0x70, 0xdb, 0x13, 0x5f, 0x2b, 0xc2, 0x43, 0x02, 0xa1, 0xe5,
	0x64, 0x4e, 0xb8, 0xd3, 0x0f, 0x06, 0x07, 0xa3, 0xd6, 0xb7, 0x8a, 0x62, 0x44, 0x9c, 0x41, 0x58,
	0x4a, 0xe7, 0xee, 0x8c, 0xcd, 0xb0, 0xc5, 0x89, 0xed, 0xef, 0x5f, 0xfe, 0x06, 0x41, 0xb2, 0x86,
	0xc5, 0x03, 0x88, 0x72, 0xe9, 0x28, 0x2d, 0xe4, 0x52, 0x61, 0xbb, 0xd2, 0x24, 0x61, 0x05, 0xbc,
	0x97, 0x4b, 0x25, 0x1e, 0x01, 0xcc, 0xb4, 0x6d, 0xd8, 0x5d, 0x66, 0x23, 0x46, 0x98, 0xee, 0x40,
	0x9b, 0x34, 0xe5, 0x0a, 0xf7, 0x98, 0xf1, 0x81, 0x78, 0x0a, 0x27, 0x7c, 0x48, 0xcd, 0x2c, 0x9d,
	0x9a, 0x5b, 0x4b, 0xca, 0xad, 0x30, 0x64, 0xc5, 0x11, 0x13, 0x1f, 0x66, 0x97, 0x35, 0x2c, 0x9e,
	0x00, 0xdc, 0x68, 0x4b, 0x8b, 0x34, 0x93, 0xa4, 0x30, 0xf2, 0xff, 0xf6, 0xeb, 0x0f, 0x06, 0x49,
	0xc4, 0xf8, 0x1b, 0x49, 0x4a, 0x9c, 0x41, 0xb4, 0xd0, 0x56, 0x79, 0x0d, 0x6c, 0x68, 0xc2, 0x0a,
	0x66, 0x09, 0xc2, 0x9e, 0xcc, 0x32, 0xab, 0x9c, 0xc3, 0x98, 0x3b, 0x35, 0xa1, 0x10, 0xd0, 0x9a,
	0x6a, 0x5a, 0xe1, 0x3e, 0xc3, 0x7c, 0x16, 0xcf, 0x60, 0xd7, 0x2f, 0x04, 0x0f, 0xfa, 0xc1, 0x20,
	0xbe, 0x38, 0x1d, 0xae, 0xd7, 0x39, 0x4c, 0x98, 0x18, 0x4f, 0x92, 0x5a, 0x22, 0x1e, 0x43, 0x5c,
	0x1a, 0x47, 0x32, 0x4f, 0xa7, 0x26, 0x53, 0x78, 0xc8, 0x75, 0xc0, 0x43, 0x97, 0x26, 0xe3, 0xde,
	0x53, 0x73, 0x5b, 0x90, 0x5d, 0xe1, 0x91, 0xef, 0x5d, 0x87, 0xd5, 0xd2, 0xca, 0x85, 0x29, 0x14,
	0x1e, 0xfb, 0xa1, 0x7f, 0x57, 0x43, 0x7b, 0x48, 0x3c, 0x84, 0x48, 0x7d, 0x22, 0x55, 0xb8, 0x6a,
	0x8c, 0x13, 0x7f, 0xb3, 0x6b, 0x40, 0x0c, 0x38, 0x93, 0x0c, 0x0a, 0x1e, 0x50, 0x6c, 0x0c, 0xf8,
	0xae, 0xf2, 0xd5, 0x78, 0x92, 0x78, 0x41, 0xb5, 0x83, 0xc2, 0x90, 0x72, 0x78, 0xea, 0x77, 0xc0,
	0x81, 0x78, 0x05, 0x60, 0x55, 0x69, 0x2c, 0xb9, 0x94, 0x0c, 0x76, 0xb8, 0x48, 0x77, 0xa3, 0x48,
	0xe3, 0xb6, 0xf1, 0x24, 0x89, 0x6a, 0xe1, 0xb5, 0x11, 0xaf, 0x21, 0x6e, 0xac, 0xa9, 0x95, 0xc3,
	0x6e, 0x7f, 0x67, 0x10, 0x5f, 0x74, 0x36, 0xd2, 0xae, 0x1b, 0xe3, 0x26, 0x9b, 0xc2, 0xf3, 0x8f,
	0x00, 0xf7, 0x05, 0xc5, 0xf1, 0xbd, 0x81, 0xaf, 0xb6, 0xd8, 0xbc, 0x2f, 0x20, 0xd4, 0x85, 0x23,
	0x59, 0x4c, 0x15, 0xfb, 0xf7, 0xff, 0x1b, 0x6f, 0x52, 0xaf, 0xb6, 0x92, 0xb5, 0x6c, 0x04, 0x10,
	0x36, 0x4f, 0xee, 0x66, 0x97, 0x5f, 0xc9, 0xcb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xbe,
	0xb9, 0x98, 0x85, 0x03, 0x00, 0x00,
}
