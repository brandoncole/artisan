// Code generated by protoc-gen-go.
// source: product.proto
// DO NOT EDIT!

package northwind

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/brandoncole/artisan/artisan/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Product struct {
	Id              string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name            string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Supplier        *SupplierFK `protobuf:"bytes,3,opt,name=supplier" json:"supplier,omitempty"`
	Category        *CategoryFK `protobuf:"bytes,4,opt,name=category" json:"category,omitempty"`
	QuantityPerUnit string      `protobuf:"bytes,5,opt,name=quantity_per_unit,json=quantityPerUnit" json:"quantity_per_unit,omitempty"`
	UnitPrice       float32     `protobuf:"fixed32,6,opt,name=unit_price,json=unitPrice" json:"unit_price,omitempty"`
	UnitsInStock    uint32      `protobuf:"varint,7,opt,name=units_in_stock,json=unitsInStock" json:"units_in_stock,omitempty"`
	UnitsOnOrder    uint32      `protobuf:"varint,8,opt,name=units_on_order,json=unitsOnOrder" json:"units_on_order,omitempty"`
	ReoderLevel     uint32      `protobuf:"varint,9,opt,name=reoder_level,json=reoderLevel" json:"reoder_level,omitempty"`
	Discontinued    bool        `protobuf:"varint,10,opt,name=discontinued" json:"discontinued,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetSupplier() *SupplierFK {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *Product) GetCategory() *CategoryFK {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Product) GetQuantityPerUnit() string {
	if m != nil {
		return m.QuantityPerUnit
	}
	return ""
}

func (m *Product) GetUnitPrice() float32 {
	if m != nil {
		return m.UnitPrice
	}
	return 0
}

func (m *Product) GetUnitsInStock() uint32 {
	if m != nil {
		return m.UnitsInStock
	}
	return 0
}

func (m *Product) GetUnitsOnOrder() uint32 {
	if m != nil {
		return m.UnitsOnOrder
	}
	return 0
}

func (m *Product) GetReoderLevel() uint32 {
	if m != nil {
		return m.ReoderLevel
	}
	return 0
}

func (m *Product) GetDiscontinued() bool {
	if m != nil {
		return m.Discontinued
	}
	return false
}

func init() {
	proto.RegisterType((*Product)(nil), "northwind.Product")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Products service

type ProductsClient interface {
}

type productsClient struct {
	cc *grpc.ClientConn
}

func NewProductsClient(cc *grpc.ClientConn) ProductsClient {
	return &productsClient{cc}
}

// Server API for Products service

type ProductsServer interface {
}

func RegisterProductsServer(s *grpc.Server, srv ProductsServer) {
	s.RegisterService(&_Products_serviceDesc, srv)
}

var _Products_serviceDesc = grpc.ServiceDesc{
	ServiceName: "northwind.Products",
	HandlerType: (*ProductsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "product.proto",
}

func init() { proto.RegisterFile("product.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xdd, 0x4a, 0xf3, 0x40,
	0x10, 0x86, 0xd9, 0x7c, 0xfd, 0xda, 0x64, 0xfb, 0x87, 0xab, 0x85, 0xa5, 0x50, 0x8c, 0xc5, 0x83,
	0xe0, 0x41, 0xc5, 0x7a, 0x07, 0x0a, 0x82, 0x28, 0xb4, 0xa4, 0x78, 0xbc, 0xc4, 0xec, 0xa2, 0x8b,
	0x75, 0x36, 0x4e, 0x36, 0x4a, 0xcf, 0xbc, 0x29, 0x6f, 0xc0, 0x6b, 0xf1, 0x1e, 0x3c, 0x95, 0xcd,
	0x4f, 0x55, 0x3c, 0x4a, 0xe6, 0x79, 0x9f, 0x19, 0x86, 0x1d, 0xda, 0xcf, 0xd0, 0xc8, 0x22, 0xb5,
	0xb3, 0x0c, 0x8d, 0x35, 0x2c, 0x00, 0x83, 0xf6, 0xfe, 0x45, 0x83, 0x1c, 0x8f, 0x12, 0xb4, 0x3a,
	0x4f, 0xe0, 0xb8, 0xfe, 0x56, 0xc6, 0x78, 0x90, 0x26, 0x56, 0xdd, 0x19, 0xdc, 0x34, 0x75, 0x5e,
	0x64, 0xd9, 0x5a, 0x2b, 0xac, 0xea, 0xe9, 0xa7, 0x47, 0x3b, 0xcb, 0x6a, 0x26, 0xdb, 0xa3, 0x9e,
	0x96, 0x9c, 0x84, 0x24, 0x0a, 0xce, 0x5a, 0xaf, 0x6f, 0x9c, 0xc4, 0x9e, 0x96, 0x8c, 0xd1, 0x16,
	0x24, 0x8f, 0x8a, 0x7b, 0x8e, 0xc7, 0xe5, 0x3f, 0x3b, 0xa1, 0x7e, 0x33, 0x87, 0xff, 0x0b, 0x49,
	0xd4, 0x9d, 0x8f, 0x66, 0xdb, 0x55, 0x66, 0xab, 0x3a, 0xba, 0xb8, 0x8a, 0xb7, 0x9a, 0x6b, 0x69,
	0x56, 0xe1, 0xad, 0x3f, 0x2d, 0xe7, 0x75, 0xe4, 0x5a, 0x1a, 0x8d, 0x1d, 0xd1, 0x9d, 0xa7, 0x22,
	0x01, 0xab, 0xed, 0x46, 0x64, 0x0a, 0x45, 0x01, 0xda, 0xf2, 0xff, 0xe5, 0x1a, 0xc3, 0x26, 0x58,
	0x2a, 0xbc, 0x01, 0x6d, 0xd9, 0x84, 0x52, 0x17, 0x8b, 0x0c, 0x75, 0xaa, 0x78, 0x3b, 0x24, 0x91,
	0x17, 0x07, 0x8e, 0x2c, 0x1d, 0x60, 0x87, 0x74, 0xe0, 0x8a, 0x5c, 0x68, 0x10, 0xb9, 0x35, 0xe9,
	0x03, 0xef, 0x84, 0x24, 0xea, 0xc7, 0xbd, 0x92, 0x5e, 0xc2, 0xca, 0xb1, 0x6f, 0xcb, 0x80, 0x30,
	0x28, 0x15, 0x72, 0xff, 0x87, 0xb5, 0x80, 0x85, 0x63, 0xec, 0x80, 0xf6, 0x50, 0x19, 0xa9, 0x50,
	0xac, 0xd5, 0xb3, 0x5a, 0xf3, 0xa0, 0x74, 0xba, 0x15, 0xbb, 0x76, 0x88, 0x4d, 0x69, 0x4f, 0xea,
	0x3c, 0x35, 0x60, 0x35, 0x14, 0x4a, 0x72, 0x1a, 0x92, 0xc8, 0x8f, 0x7f, 0xb1, 0xf9, 0x3e, 0xf5,
	0xeb, 0x87, 0xcf, 0xc7, 0xbb, 0xef, 0x1f, 0x93, 0x61, 0x73, 0xb8, 0x9a, 0xde, 0xb6, 0xcb, 0x0b,
	0x9d, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xe6, 0x29, 0x50, 0xf4, 0x01, 0x00, 0x00,
}
