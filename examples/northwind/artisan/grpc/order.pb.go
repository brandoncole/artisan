// Code generated by protoc-gen-go.
// source: order.proto
// DO NOT EDIT!

package northwind

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/brandoncole/artisan/artisan/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Order struct {
	Id             string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Customer       *CustomerFK  `protobuf:"bytes,2,opt,name=customer" json:"customer,omitempty"`
	Employee       *EmployeeFK  `protobuf:"bytes,3,opt,name=employee" json:"employee,omitempty"`
	OrderDate      string       `protobuf:"bytes,4,opt,name=order_date,json=orderDate" json:"order_date,omitempty"`
	RequiredDate   string       `protobuf:"bytes,5,opt,name=required_date,json=requiredDate" json:"required_date,omitempty"`
	ShippedDate    string       `protobuf:"bytes,6,opt,name=shipped_date,json=shippedDate" json:"shipped_date,omitempty"`
	Shipper        *ShipperFK   `protobuf:"bytes,7,opt,name=shipper" json:"shipper,omitempty"`
	Freight        float32      `protobuf:"fixed32,8,opt,name=freight" json:"freight,omitempty"`
	ShipName       string       `protobuf:"bytes,9,opt,name=ship_name,json=shipName" json:"ship_name,omitempty"`
	ShipAddress    string       `protobuf:"bytes,10,opt,name=ship_address,json=shipAddress" json:"ship_address,omitempty"`
	ShipCity       string       `protobuf:"bytes,11,opt,name=ship_city,json=shipCity" json:"ship_city,omitempty"`
	ShipRegion     string       `protobuf:"bytes,12,opt,name=ship_region,json=shipRegion" json:"ship_region,omitempty"`
	ShipPostalCode string       `protobuf:"bytes,13,opt,name=ship_postal_code,json=shipPostalCode" json:"ship_postal_code,omitempty"`
	ShipCountry    string       `protobuf:"bytes,14,opt,name=ship_country,json=shipCountry" json:"ship_country,omitempty"`
	Items          []*OrderItem `protobuf:"bytes,15,rep,name=items" json:"items,omitempty"`
	Total          float32      `protobuf:"fixed32,16,opt,name=total" json:"total,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Order) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Order) GetCustomer() *CustomerFK {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (m *Order) GetEmployee() *EmployeeFK {
	if m != nil {
		return m.Employee
	}
	return nil
}

func (m *Order) GetOrderDate() string {
	if m != nil {
		return m.OrderDate
	}
	return ""
}

func (m *Order) GetRequiredDate() string {
	if m != nil {
		return m.RequiredDate
	}
	return ""
}

func (m *Order) GetShippedDate() string {
	if m != nil {
		return m.ShippedDate
	}
	return ""
}

func (m *Order) GetShipper() *ShipperFK {
	if m != nil {
		return m.Shipper
	}
	return nil
}

func (m *Order) GetFreight() float32 {
	if m != nil {
		return m.Freight
	}
	return 0
}

func (m *Order) GetShipName() string {
	if m != nil {
		return m.ShipName
	}
	return ""
}

func (m *Order) GetShipAddress() string {
	if m != nil {
		return m.ShipAddress
	}
	return ""
}

func (m *Order) GetShipCity() string {
	if m != nil {
		return m.ShipCity
	}
	return ""
}

func (m *Order) GetShipRegion() string {
	if m != nil {
		return m.ShipRegion
	}
	return ""
}

func (m *Order) GetShipPostalCode() string {
	if m != nil {
		return m.ShipPostalCode
	}
	return ""
}

func (m *Order) GetShipCountry() string {
	if m != nil {
		return m.ShipCountry
	}
	return ""
}

func (m *Order) GetItems() []*OrderItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Order) GetTotal() float32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type OrderItem struct {
	UnitPrice float32 `protobuf:"fixed32,1,opt,name=unit_price,json=unitPrice" json:"unit_price,omitempty"`
	Quantity  uint32  `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
	Discount  float32 `protobuf:"fixed32,3,opt,name=discount" json:"discount,omitempty"`
}

func (m *OrderItem) Reset()                    { *m = OrderItem{} }
func (m *OrderItem) String() string            { return proto.CompactTextString(m) }
func (*OrderItem) ProtoMessage()               {}
func (*OrderItem) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *OrderItem) GetUnitPrice() float32 {
	if m != nil {
		return m.UnitPrice
	}
	return 0
}

func (m *OrderItem) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

func (m *OrderItem) GetDiscount() float32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func init() {
	proto.RegisterType((*Order)(nil), "northwind.Order")
	proto.RegisterType((*OrderItem)(nil), "northwind.OrderItem")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Orders service

type OrdersClient interface {
}

type ordersClient struct {
	cc *grpc.ClientConn
}

func NewOrdersClient(cc *grpc.ClientConn) OrdersClient {
	return &ordersClient{cc}
}

// Server API for Orders service

type OrdersServer interface {
}

func RegisterOrdersServer(s *grpc.Server, srv OrdersServer) {
	s.RegisterService(&_Orders_serviceDesc, srv)
}

var _Orders_serviceDesc = grpc.ServiceDesc{
	ServiceName: "northwind.Orders",
	HandlerType: (*OrdersServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "order.proto",
}

func init() { proto.RegisterFile("order.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x49, 0xb7, 0xdd, 0x36, 0xa7, 0x4d, 0x5d, 0x87, 0x2d, 0x8c, 0x59, 0xd4, 0xb8, 0x5e,
	0x58, 0xff, 0x50, 0x61, 0x15, 0xbc, 0xb6, 0x55, 0x41, 0x04, 0x5d, 0xe2, 0x03, 0x84, 0x31, 0x33,
	0x6e, 0x07, 0x9a, 0x4c, 0x76, 0x32, 0x41, 0x7a, 0xb7, 0x78, 0xe5, 0xb5, 0x8f, 0x22, 0xec, 0x0b,
	0xf8, 0x04, 0x3e, 0x84, 0x6f, 0xe0, 0x0b, 0xc8, 0x9c, 0xc9, 0xa4, 0x45, 0xaf, 0x4a, 0xbe, 0xef,
	0xf7, 0x65, 0xbe, 0x39, 0x3d, 0x81, 0xb1, 0xd2, 0x5c, 0xe8, 0x45, 0xa5, 0x95, 0x51, 0x24, 0x2c,
	0x95, 0x36, 0xeb, 0x2f, 0xb2, 0xe4, 0xf1, 0x8c, 0x69, 0x23, 0x6b, 0x56, 0x3e, 0x6d, 0x7f, 0x1d,
	0x11, 0x4f, 0xf3, 0xa6, 0x36, 0xaa, 0xf0, 0x89, 0x78, 0x2a, 0x8a, 0x6a, 0xa3, 0xb6, 0x42, 0xb4,
	0xcf, 0x51, 0xbd, 0x96, 0x55, 0xe5, 0xed, 0xd3, 0xaf, 0x03, 0x18, 0x7c, 0xb0, 0x07, 0x90, 0x63,
	0xe8, 0x49, 0x4e, 0x83, 0x24, 0x98, 0x87, 0xcb, 0xfe, 0xd5, 0x35, 0x0d, 0xd2, 0x9e, 0xe4, 0xe4,
	0x05, 0x8c, 0xfc, 0x0b, 0x69, 0x2f, 0x09, 0xe6, 0xe3, 0xb3, 0xd9, 0xa2, 0xeb, 0xb0, 0x58, 0xb5,
	0xd6, 0x9b, 0x77, 0xcb, 0xfe, 0x37, 0x1b, 0xe9, 0x60, 0x1b, 0xf4, 0x27, 0xd3, 0x83, 0xff, 0x82,
	0xaf, 0x5b, 0x6b, 0x17, 0xf4, 0x30, 0xb9, 0x0f, 0x80, 0x37, 0xce, 0x38, 0x33, 0x82, 0xf6, 0x5d,
	0x9f, 0x5f, 0x7f, 0x68, 0x90, 0x86, 0xa8, 0xbf, 0x62, 0x46, 0x90, 0x87, 0x10, 0x69, 0x71, 0xd9,
	0x48, 0x2d, 0xb8, 0xe3, 0x06, 0x7b, 0xdc, 0xc4, 0x5b, 0x88, 0x3e, 0x80, 0x89, 0xbb, 0x72, 0x4b,
	0x1e, 0xee, 0x91, 0xe3, 0xd6, 0x41, 0xf0, 0x39, 0x0c, 0xdb, 0xd9, 0xd0, 0x21, 0x16, 0x3e, 0xde,
	0x2b, 0xfc, 0xd1, 0x39, 0x5d, 0x5f, 0x8f, 0x92, 0x3b, 0x30, 0xfc, 0xac, 0x85, 0xbc, 0x58, 0x1b,
	0x3a, 0x4a, 0x82, 0x79, 0x6f, 0xd9, 0xbf, 0xfa, 0x71, 0x2b, 0x48, 0xbd, 0x48, 0x4e, 0x20, 0xb4,
	0x68, 0x56, 0xb2, 0x42, 0xd0, 0xd0, 0x9e, 0x9d, 0x8e, 0xac, 0xf0, 0x9e, 0x15, 0x82, 0xdc, 0x73,
	0xdd, 0x32, 0xc6, 0xb9, 0x16, 0x75, 0x4d, 0x01, 0x7d, 0x6c, 0xf5, 0xd2, 0x49, 0x5d, 0x3e, 0x97,
	0x66, 0x4b, 0xc7, 0xbb, 0xfc, 0x4a, 0x9a, 0x2d, 0xb9, 0x0b, 0xc8, 0x66, 0x5a, 0x5c, 0x48, 0x55,
	0xd2, 0x09, 0xda, 0x60, 0xa5, 0x14, 0x15, 0x32, 0x87, 0x23, 0x04, 0x2a, 0x55, 0x1b, 0xb6, 0xc9,
	0x72, 0xc5, 0x05, 0x8d, 0x90, 0x9a, 0x5a, 0xfd, 0x1c, 0xe5, 0x95, 0xe2, 0xbb, 0x2a, 0xb9, 0x6a,
	0x4a, 0xa3, 0xb7, 0x74, 0xba, 0xab, 0xb2, 0x72, 0x12, 0x79, 0x04, 0x03, 0x69, 0x44, 0x51, 0xd3,
	0x1b, 0xc9, 0xc1, 0x3f, 0xe3, 0xc1, 0x15, 0x7a, 0x6b, 0x44, 0x91, 0x3a, 0x84, 0x3c, 0x86, 0x81,
	0x51, 0x86, 0x6d, 0xe8, 0x11, 0x0e, 0x65, 0x66, 0x87, 0xf6, 0xfd, 0x9a, 0x46, 0xed, 0x58, 0x9e,
	0x20, 0x95, 0x3a, 0xe6, 0xb4, 0x84, 0xb0, 0x7b, 0x81, 0xfd, 0xff, 0x9b, 0x52, 0x9a, 0xac, 0xd2,
	0x32, 0x17, 0xb8, 0x8f, 0x7e, 0xa6, 0xa1, 0xd5, 0xcf, 0xad, 0x4c, 0x62, 0x18, 0x5d, 0x36, 0xac,
	0x34, 0x76, 0x28, 0x76, 0x2d, 0xa3, 0xb4, 0x7b, 0x26, 0x09, 0x8c, 0xb8, 0xac, 0xf1, 0x1e, 0xb8,
	0x79, 0x3e, 0xde, 0xa9, 0x67, 0x27, 0x70, 0x88, 0xe7, 0xd5, 0xf1, 0xcd, 0x9f, 0xbf, 0x6f, 0x47,
	0xfe, 0x03, 0x42, 0xed, 0xd3, 0x21, 0x7e, 0x18, 0xcf, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xaa,
	0xe8, 0x3a, 0xd5, 0x78, 0x03, 0x00, 0x00,
}
