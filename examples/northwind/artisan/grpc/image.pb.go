// Code generated by protoc-gen-go.
// source: image.proto
// DO NOT EDIT!

package northwind

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/brandoncole/artisan/artisan"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Image struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ImageFK struct {
	// Types that are valid to be assigned to Image:
	//	*ImageFK_Id
	//	*ImageFK_Instance
	Image isImageFK_Image `protobuf_oneof:"image"`
}

func (m *ImageFK) Reset()                    { *m = ImageFK{} }
func (m *ImageFK) String() string            { return proto.CompactTextString(m) }
func (*ImageFK) ProtoMessage()               {}
func (*ImageFK) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type isImageFK_Image interface {
	isImageFK_Image()
}

type ImageFK_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,oneof"`
}
type ImageFK_Instance struct {
	Instance *Image `protobuf:"bytes,2,opt,name=instance,oneof"`
}

func (*ImageFK_Id) isImageFK_Image()       {}
func (*ImageFK_Instance) isImageFK_Image() {}

func (m *ImageFK) GetImage() isImageFK_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *ImageFK) GetId() string {
	if x, ok := m.GetImage().(*ImageFK_Id); ok {
		return x.Id
	}
	return ""
}

func (m *ImageFK) GetInstance() *Image {
	if x, ok := m.GetImage().(*ImageFK_Instance); ok {
		return x.Instance
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ImageFK) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ImageFK_OneofMarshaler, _ImageFK_OneofUnmarshaler, _ImageFK_OneofSizer, []interface{}{
		(*ImageFK_Id)(nil),
		(*ImageFK_Instance)(nil),
	}
}

func _ImageFK_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ImageFK)
	// image
	switch x := m.Image.(type) {
	case *ImageFK_Id:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Id)
	case *ImageFK_Instance:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Instance); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ImageFK.Image has unexpected type %T", x)
	}
	return nil
}

func _ImageFK_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ImageFK)
	switch tag {
	case 1: // image.id
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Image = &ImageFK_Id{x}
		return true, err
	case 2: // image.instance
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Image)
		err := b.DecodeMessage(msg)
		m.Image = &ImageFK_Instance{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ImageFK_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ImageFK)
	// image
	switch x := m.Image.(type) {
	case *ImageFK_Id:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Id)))
		n += len(x.Id)
	case *ImageFK_Instance:
		s := proto.Size(x.Instance)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Image)(nil), "northwind.Image")
	proto.RegisterType((*ImageFK)(nil), "northwind.ImageFK")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Images service

type ImagesClient interface {
}

type imagesClient struct {
	cc *grpc.ClientConn
}

func NewImagesClient(cc *grpc.ClientConn) ImagesClient {
	return &imagesClient{cc}
}

// Server API for Images service

type ImagesServer interface {
}

func RegisterImagesServer(s *grpc.Server, srv ImagesServer) {
	s.RegisterService(&_Images_serviceDesc, srv)
}

var _Images_serviceDesc = grpc.ServiceDesc{
	ServiceName: "northwind.Images",
	HandlerType: (*ImagesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "image.proto",
}

func init() { proto.RegisterFile("image.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcc, 0x4d, 0x4c,
	0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xcc, 0xcb, 0x2f, 0x2a, 0xc9, 0x28, 0xcf,
	0xcc, 0x4b, 0x91, 0x12, 0x4d, 0x2c, 0x2a, 0xc9, 0x2c, 0x4e, 0xcc, 0xd3, 0x87, 0xd2, 0x10, 0x15,
	0x4a, 0x86, 0x5c, 0xac, 0x9e, 0x20, 0x0d, 0x42, 0x22, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x4e, 0x2c, 0x0d, 0x5b, 0x25, 0x18, 0x83, 0x98, 0x32, 0x53, 0x84, 0x84, 0xb8,
	0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0xa5, 0x10,
	0x2e, 0x76, 0xb0, 0x16, 0x37, 0x6f, 0x21, 0x01, 0x84, 0x26, 0x0f, 0x06, 0xb0, 0x06, 0x3d, 0x2e,
	0x8e, 0xcc, 0xbc, 0xe2, 0x92, 0xc4, 0xbc, 0xe4, 0x54, 0xb0, 0x26, 0x6e, 0x23, 0x01, 0x3d, 0xb8,
	0x23, 0xf4, 0xc0, 0xfa, 0x3c, 0x18, 0x82, 0xe0, 0x6a, 0x9c, 0xd8, 0xb9, 0x58, 0xc1, 0x0e, 0x36,
	0x92, 0xe6, 0x62, 0x03, 0xcb, 0x16, 0x4b, 0x09, 0x1e, 0x7a, 0x22, 0xcb, 0x0b, 0x73, 0x25, 0x58,
	0x2c, 0x89, 0x0d, 0xec, 0x58, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xfd, 0x06, 0x4b,
	0xdd, 0x00, 0x00, 0x00,
}
